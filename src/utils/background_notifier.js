// Defines notification options as a function that takes title and message
// as arguments
//
// **Returns:**
//   An object with the following properties:
//     - type: The type of notification (always 'basic' in this case)
//     - title: The title of the notification (passed as an argument)
//     - message: The body of the notification (passed as an argument)
//     - iconUrl: The URL of the notification icon
//     - priority: The priority of the notification (always 0 in this case)
const notificationOptions = (title, message) => ({
  type: 'basic',
  title: title,
  message: message,
  iconUrl: chrome.runtime.getURL('assets/images/icon-32.png'),
  priority: 0,
});

// Unique identifier for the notification
const id = 'recap_notification';

// Displays a notification with a title, message, and optional callback.
// Functionality:
//   1. Logs a message indicating the function is running.
//   2. Creates a notification using `chrome.notifications.create` with the
//    provided title, message, and options generated by `notificationOptions`.
//   3. Adds a click listener using `chrome.notifications.onClicked` event.
const showNotification = function (title, message, cb) {
  console.info(
    'RECAP: Running showNotification function. Expect a notification.'
  );
  chrome.notifications.create(id, notificationOptions(title, message));
  // Make it go away when clicked.
  chrome.notifications.onClicked.addListener((id) =>
    chrome.notifications.clear(id)
  );
};

// Handles background notification requests sent from the extension.
//
// Functionality:
//   1. Destructures relevant parameters (action, title, message) from the
//    request object's "notifier" property.
//   2. Uses a switch statement to handle different notification actions:
//      - 'show': Shows a notification with the provided title and message.
//      - 'showUpload': Checks if notifications are enabled in storage. If
//        enabled, shows a notification with the provided title and message.
//      - default: Does nothing for unrecognized actions.
//   3. After handling the action, sends a response back to the extension
//    with a "success" status.
export const handleBackgroundNotification = (req, sender, sendResponse) => {
  // destructure params
  const { action, title, message } = req.notifier;
  switch (action) {
    case 'show':
      showNotification(title, message);
      sendResponse({ status: 'success' });
      break;
    case 'showUpload':
      chrome.storage.local.get('options', (items) => {
        if (!items || !items.options.show_notifications) return;
        showNotification(title, message);
        sendResponse({ status: 'success ' });
      });
      break;
    default:
      break;
  }
};
